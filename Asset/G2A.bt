//------------------------------------------------
//--- 010 Editor v9.1.0 Binary Template
//
//      File: Koei Tecmo Animation
//   Authors: HealingBrew, Lukas Cone, Joschka
//   Version: 1.6
//   Purpose: Parsing G2A animations
//  Category: OO_Asset
// File Mask: *.g2a
//  ID Bytes: 5F 41 32 47
//   History:
//   1.6    2020-01-14 Joschka: Added version distinction
//   1.5    2020-01-02 Joschka: Updated structures
//   1.4    2019-12-31 Joschka: Updated structures
//   1.3    2019-12-30 healingbrew: Normalized file.
//   1.2    2019-12-26 Lukas Cone: Updated structures.
//   1.1    2019-11-14 healingbrew: Update with RE'd structure
//   1.0    2019-11-14 healingbrew: Update with more accurate structure
//   1.0    2019-11-10 healingbrew: Made the original file
//------------------------------------------------

LittleEndian();

#include "../G1SharedStructures.bt"

typedef struct G2APACKEDBONEINFO {
    int animation_length_in_frames : 20, /*number of frames (including non-keyframes*/
        bone_count : 12;
    // Actual disasm
    // bone_info_blob_size = (packed_data >> 18) & 0x3FFC;
    // animation_length_in_frames    =  packed_data & 0xFFF;
    //
    // bone_info_blob_size could be 12 bits, and animation_length_in_frames could be 20--
    // however this is not how the game parses the data.
} G2APackedBoneInfo;


typedef enum <ushort> {
    Rotation,
    Position,
    Scale
} G2AKeyframeType;

typedef struct G2AFRAMESPLINE {
    G2AKeyframeType type<name="type">;
    ushort keyframe_count<name="Keyframes' Count">;
    uint first_matrix<name="First Matrix Index">;
    ushort keyframes[keyframe_count]<name="Keyframes' Timing", comment="In frames probably">;
    G1Helper_AlignBytes(4);
} G2AFrameSpline;

typedef struct G2ABONEINFO {
    if(version < 50) {
        int spline_type_count : 4,
            bone_ID : 10,
            bone_timing_data_offset : 18;
    } else { // this fixes the bug, thanks koei
        int spline_type_count : 4,
            bone_ID : 8,
            bone_timing_data_offset : 20;
    }
    local int locp = FTell();
    if(bone_ID < lastId) { // this is how v30 fixes the bug.
        globalOffset += 1;
    }
    lastId = bone_ID;
    local int actual_Bone_ID = bone_ID + globalOffset * (version < 50 ? 1024 : 256);
    Printf("%d, %d\n", bone_ID, actual_Bone_ID);
    FSeek(startp + bone_timing_data_offset + bone_info_blob_size - globalOffset);
    G2AFrameSpline frame[spline_type_count]<name="splines", optimize=false>;
    FSeek(locp);
} G2ABoneInfo;

typedef struct G2AQUANTIZEDDATA {
    uint64 data[4]<name="data">;
} G2AQuantizedData;

typedef struct G2ASTRUCTURE {
    GResourceSectionHeader header<name="Header", read=GetSectionName>;
    local int version = G1Helper_GetVersionA(header.version);

    float fps<name="Framerate", comment="Probably">;
    G2APackedBoneInfo packed_data<name="Packed Data", comment="Divide 1st by framerate = length in sec">;
    int timing_section_size<name="Timing section size">;
    int entry_count<name="Entry Count">;
    if(version >= 50)
        int unknown1_count<name="Unknown 1">;

    local int bone_info_blob_size = packed_data.bone_count << 2;

    local int startp = FTell();

    struct G2ABONEINFOWRAPPER {
        local int i = 0;
        local int lastId = 0;
        local int globalOffset = 0;
        for(i = 0; i < packed_data.bone_count; ++i) {
            G2ABoneInfo bones<name="BoneInfo", optimize=false>;
        }
    } G2ABoneInfoWrapper<name="Bone Info">;

    FSeek(startp + bone_info_blob_size + timing_section_size);
    G2AQuantizedData quantized_data[entry_count]<name="Quantized data">;
} G2AStructure;

G2AStructure File<name="G2A", open=true>;
