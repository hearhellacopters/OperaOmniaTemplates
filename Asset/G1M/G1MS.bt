//------------------------------------------------
//--- 010 Editor v9.0.2 Binary Template
//
//      File: G1MS.bt
//   Authors: Raytwo, HealingBrew
//   Version: 1.2.1
//   Purpose: Outlines G1MS (Skeleton) format found in G1M files
//  Category: Game File
// File Mask: 
//  ID Bytes: 53 4D 31 47
//   History:
//   1.2.1    2020-01-14  Joschka: Small struct change due to crash on samples
//   1.2      2019-11-01  HealingBrew: Fixed bone indices
//   1.1      2019-11-01  HealingBrew: Adapted for inclusion
//   1.0      2019-08-27  Raytwo: Created the file
//------------------------------------------------

#ifndef G1M_SKELETON
#define G1M_SKELETON

#ifndef G1M_SHAREDSTRUCTURES
#include "../../G1SharedStructures.bt"
#endif // G1M_SHAREDSTRUCTURES

typedef struct G1MSKELETONBONE {
    Vector3 scale<name="Scale">;
    int32 parent<name="Parent">;
    Quaternion rotation<name="Rotation">;
    Vector3 position<name="Position">;
    float length<name="Length", comment="Always 1.0", fgcolor=cWhite>;
} G1MSkeletonBone;

typedef struct G1MSKELETONBONESET {
    int16 bone_count<name="Bone Count">;
    G1MSkeletonBone bones[bone_count + 1]<name="Bones">;
} G1MSkeletonBoneSet;

typedef struct G1MSKELETON {
    local int32 start = FTell() - 0x0C;
    uint32 data_offset<name="Data region offset", format=hex>;
    uint32 unknown<name="Unknown 1">;
    uint16 total_bone_count<name="Total Bone Count">;
    uint16 bone_table_count<name="Bone Table Count">;
    uint32 bone_set_count<name="Bone Set Count">;
    int16 bone_indices[bone_table_count]<name="Bone Indices", fgcolor=cLtAqua>;
    FSeek(start + data_offset);
    //G1MSkeletonBoneSet bone_sets[bone_set_count]<name="Bone Sets", optimize=false>;
    G1MSkeletonBone bones[total_bone_count]<name="Bones", optimize=false>;
} G1MSkeleton;

#ifndef G1M_FILELESS
#define G1M_FILELESS

LittleEndian();

struct FILE {
    GResourceSectionHeader header<name="Header">;
    G1MSkeleton data<name="Skeleton">;
} File<name="G1MS", open=true>;

#endif // G1M_FILELESS

#endif // G1M_SKELETON
